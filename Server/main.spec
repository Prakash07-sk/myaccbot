# -*- mode: python ; coding: utf-8 -*-
import os
import sys

# Get the current directory
current_dir = os.path.dirname(os.path.abspath(SPEC))

# Define paths
server_dir = current_dir
data_dir = os.path.join(server_dir, 'data')
dist_dir = os.path.join(server_dir, 'dist')

# Create dist directory if it doesn't exist
os.makedirs(dist_dir, exist_ok=True)

# Build datas list dynamically
datas = []
if os.path.exists(data_dir):
    datas.append((data_dir, 'data'))

# Add .env file if it exists
env_file = os.path.join(server_dir, '.env')
if os.path.exists(env_file):
    datas.append((env_file, '.'))

# Add Python modules
for module_dir in ['utils', 'Controller', 'router', 'Schema', 'middleware']:
    module_path = os.path.join(server_dir, module_dir)
    if os.path.exists(module_path):
        datas.append((module_path, module_dir))

a = Analysis(
    ['main.py'],
    pathex=[server_dir],
    binaries=[],
    datas=datas,
    hiddenimports=[
        'chromadb.telemetry.posthog',
        'chromadb.telemetry.events',
        'chromadb.telemetry.implementation',
        'chromadb.telemetry.product.posthog',
        'chromadb.api.rust',
        'chromadb.api.rust.rust',
        'chromadb.api.rust.rustapi',
        'chromadb.api.rust.rustapi_pb2',
        'chromadb.api.rust.rustapi_pb2_grpc',
        'uvicorn.loops.auto',
        'uvicorn.loops.asyncio',
        'uvicorn.protocols.http.auto',
        'uvicorn.protocols.http.h11_impl',
        'uvicorn.protocols.http.httptools_impl',
        'uvicorn.protocols.websockets.auto',
        'uvicorn.protocols.websockets.websockets_impl',
        'uvicorn.protocols.websockets.wsproto_impl',
        'uvicorn.lifespan.on',
        'fastapi',
        'starlette',
        'pydantic',
        'pydantic_core',
        'orjson',
        'anyio',
        'sniffio',
        'h11',
        'httptools',
        'websockets',
        'uvloop',
        'watchfiles',
        'python_multipart',
        'email_validator',
        'jinja2',
        'python_jose',
        'passlib',
        'bcrypt',
        'python_dotenv',
        'typer',
        'rich',
        'click',
        'coloredlogs',
        'humanfriendly',
        'distro',
        'shellingham',
        'argcomplete',
        'importlib_metadata',
        'importlib_resources',
        'zipp',
        'typing_extensions',
        'annotated_types',
        'pydantic_core._pydantic_core',
        'pydantic_core._pydantic_core._pydantic_core',
        'torch',
        'torch.nn',
        'torch.nn.functional',
        'torch.utils',
        'torch.utils.data',
        'transformers',
        'transformers.models',
        'transformers.models.instructor',
        'sentence_transformers',
        'sentence_transformers.datasets',
        'sentence_transformers.evaluation',
        'sentence_transformers.evaluation.BinaryClassificationEvaluator',
        'sklearn',
        'sklearn.metrics',
        'sklearn.model_selection',
        'sklearn.linear_model',
        'sklearn.ensemble',
        'sklearn.preprocessing',
        'sklearn.feature_extraction',
        'sklearn.feature_extraction.text',
        'sklearn.decomposition',
        'sklearn.cluster',
        'sklearn.neighbors',
        'sklearn.svm',
        'sklearn.tree',
        'sklearn.neural_network',
        'sklearn.gaussian_process',
        'sklearn.naive_bayes',
        'sklearn.discriminant_analysis',
        'sklearn.isotonic',
        'sklearn.kernel_ridge',
        'sklearn.multioutput',
        'sklearn.multioutput.MultiOutputRegressor',
        'sklearn.multioutput.MultiOutputClassifier',
        'sklearn.utils',
        'sklearn.utils.validation',
        'sklearn.utils.multiclass',
        'sklearn.utils.fixes',
        'sklearn.utils._param_validation',
        'sklearn.utils._array_api',
        'sklearn.utils._weight_vector',
        'sklearn.utils._heap',
        'sklearn.utils._random',
        'sklearn.utils._tags',
        'sklearn.utils._testing',
        'sklearn.utils._bunch',
        'sklearn.utils._pprint',
        'sklearn.utils._show_versions',
        'sklearn.utils._set_output',
        'sklearn.utils._encode',
        'sklearn.utils._response',
        'sklearn.utils._openmp_helpers',
        'sklearn.utils._typedefs',
        'sklearn.utils._array_api',
        'sklearn.utils._weight_vector',
        'sklearn.utils._heap',
        'sklearn.utils._random',
        'sklearn.utils._tags',
        'sklearn.utils._testing',
        'sklearn.utils._bunch',
        'sklearn.utils._pprint',
        'sklearn.utils._show_versions',
        'sklearn.utils._set_output',
        'sklearn.utils._encode',
        'sklearn.utils._response',
        'sklearn.utils._openmp_helpers',
        'sklearn.utils._typedefs',
        'instructorembedding',
        'InstructorEmbedding',
        'InstructorEmbedding.instructor',
        'scipy',
        'scipy.sparse',
        'scipy.sparse.csgraph',
        'scipy.sparse.linalg',
        'scipy.linalg',
        'scipy.special',
        'scipy.stats',
        'scipy.optimize',
        'scipy.spatial',
        'scipy.spatial.distance',
        'scipy.cluster',
        'scipy.cluster.hierarchy',
        'scipy.ndimage',
        'scipy.interpolate',
        'scipy.integrate',
        'scipy.fft',
        'scipy.signal',
        'scipy.io',
        'scipy.misc',
        'scipy.constants',
        'scipy.weave',
        'scipy.lib',
        'scipy.lib.lapack',
        'scipy.lib.blas',
        'scipy._lib',
        'scipy._lib._util',
        'scipy._lib._testutils',
        'scipy._lib._tmpdirs',
        'scipy._lib._ccallback',
        'scipy._lib._uarray',
        'scipy._lib._pep440',
        'scipy._lib._test_utils',
        'scipy._lib._gcutils',
        'scipy._lib._array_api',
        'scipy._lib._finite_differences',
        'scipy._lib._disjoint_set',
        'scipy._lib._bunch',
        'scipy._lib._version',
        'scipy._lib._deprecation',
        'scipy._lib._numpy_compat',
        'scipy._lib._threadsafety',
        'scipy._lib._docscrape',
        'scipy._lib._test_utils',
        'scipy._lib._gcutils',
        'scipy._lib._array_api',
        'scipy._lib._finite_differences',
        'scipy._lib._disjoint_set',
        'scipy._lib._bunch',
        'scipy._lib._version',
        'scipy._lib._deprecation',
        'scipy._lib._numpy_compat',
        'scipy._lib._threadsafety',
        'scipy._lib._docscrape',
        'PIL',
        'PIL.Image',
        'PIL.ImageDraw',
        'PIL.ImageFont',
        'PIL.ImageOps',
        'PIL.ImageFilter',
        'PIL.ImageEnhance',
        'PIL.ImageChops',
        'PIL.ImageColor',
        'PIL.ImageFile',
        'PIL.ImageGrab',
        'PIL.ImageMath',
        'PIL.ImageMode',
        'PIL.ImagePalette',
        'PIL.ImagePath',
        'PIL.ImageSequence',
        'PIL.ImageStat',
        'PIL.ImageTk',
        'PIL.ImageTransform',
        'PIL.ImageWin',
        'PIL._imaging',
        'PIL._imagingft',
        'PIL._imagingmath',
        'PIL._imagingmorph',
        'PIL._imagingqt',
        'PIL._webp',
        'PIL._tkinter_finder',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'tkinter',
        'matplotlib',
        'numpy.distutils',
        'pandas',
        'cv2',
        'tensorflow',
        'jupyter',
        'notebook',
        'IPython',
    ],
    noarchive=False,
    optimize=0,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=None)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.datas,
    [],
    name='myaccobot-backend',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,  # Set to True for debugging bundled executable
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,  # Add icon path if you have one
)